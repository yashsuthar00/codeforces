name: Codeforces C++ Solution Check

on:
  push:
    paths:
      - 'cpp/*.cpp'
  pull_request:
    paths:
      - 'cpp/*.cpp'

jobs:
  build-and-test-cpp:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Compile and test all C++ files
        run: |
          shopt -s nullglob
          failed=0
          failed_cases=""
          for file in cpp/*.cpp; do
            base=$(basename "$file" .cpp)
            echo "Compiling $file..."
            g++ -std=c++17 "$file" -o "/tmp/$base" || { echo "‚ùå Failed to compile $file"; failed=1; failed_cases="$failed_cases\n$file: Compilation failed"; continue; }
            echo "‚úÖ Compiled $file successfully"
            for testcase in testcases/${base}*.in; do
              [ -e "$testcase" ] || continue
              suffix="${testcase#testcases/$base}"
              suffix="${suffix%.in}"
              out="testcases/${base}${suffix}.out"
              echo "Testing $file with $testcase"
              "/tmp/$base" < "$testcase" > "/tmp/$base.actual"
              if [ -f "$out" ]; then
                echo "Comparing output with expected result..."
                # Normalize both outputs by trimming whitespace
                tr -d '\r' < "/tmp/$base.actual" | sed 's/[[:space:]]*$//' > "/tmp/$base.actual_clean"
                tr -d '\r' < "$out" | sed 's/[[:space:]]*$//' > "/tmp/$base.expected_clean"
                
                if diff -w "/tmp/$base.expected_clean" "/tmp/$base.actual_clean" > /dev/null; then
                  echo "‚úÖ Output matches for $file with $testcase"
                else
                  echo "‚ùå Output mismatch for $file with $testcase"
                  echo "Expected (hex):"
                  hexdump -C "/tmp/$base.expected_clean"
                  echo "Actual (hex):"
                  hexdump -C "/tmp/$base.actual_clean"
                  echo "Expected (text):"
                  cat "/tmp/$base.expected_clean"
                  echo "Actual (text):"
                  cat "/tmp/$base.actual_clean"
                  failed=1
                  failed_cases="$failed_cases\n$file with $testcase: Output mismatch"
                fi
              else
                echo "‚ö†Ô∏è No expected output file found for $file with $testcase, skipping output check"
              fi
            done
          done
          if [ $failed -ne 0 ]; then
            echo "\n‚ùå Some testcases failed:"
            echo -e "$failed_cases"
            exit 1
          else
            echo "\nüéâ All C++ files compiled and tested successfully!"
          fi
